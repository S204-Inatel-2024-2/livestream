consumes:
    - application/json
definitions:
    CreateLiveStreamBody:
        properties:
            name:
                description: Name of the live stream
                type: string
                x-go-name: Name
            user_id:
                description: User ID of the stream creator
                type: string
                x-go-name: UserId
        required:
            - user_id
            - name
        type: object
        x-go-package: github.com/gtvb/livestream/application/http
    LiveStream:
        description: Representa uma livestream acontecendo na plataforma
        properties:
            created_at:
                format: date-time
                type: string
                x-go-name: CreatedAt
            id:
                type: string
                x-go-name: ID
            live_stream_status:
                type: boolean
                x-go-name: LiveStatus
            name:
                type: string
                x-go-name: Name
            publisher_id:
                type: string
                x-go-name: PublisherId
            stream_key:
                type: string
                x-go-name: StreamKey
            updated_at:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            viewer_count:
                format: int64
                type: integer
                x-go-name: ViewerCount
        type: object
        x-go-package: github.com/gtvb/livestream/models
    LoginBody:
        properties:
            email:
                description: User's email
                type: string
                x-go-name: Email
            password:
                description: User's password
                type: string
                x-go-name: Password
        required:
            - email
            - password
        type: object
        x-go-package: github.com/gtvb/livestream/application/http
    SignupBody:
        properties:
            email:
                description: User's email
                type: string
                x-go-name: Email
            name:
                description: User's name
                type: string
                x-go-name: Name
            password:
                description: User's password
                type: string
                x-go-name: Password
            username:
                description: User's username
                type: string
                x-go-name: Username
        required:
            - name
            - username
            - email
            - password
        type: object
        x-go-package: github.com/gtvb/livestream/application/http
    UpdateLiveStreamBody:
        properties:
            live_status:
                description: Live Status. On or off
                type: boolean
                x-go-name: LiveStatus
            name:
                description: Name of the live stream
                type: string
                x-go-name: Name
        required:
            - live_status
            - name
        type: object
        x-go-package: github.com/gtvb/livestream/application/http
    UpdateUserBody:
        properties:
            email:
                description: User's email
                type: string
                x-go-name: Email
            password:
                description: User's password
                type: string
                x-go-name: Password
            username:
                description: User's username
                type: string
                x-go-name: Username
        required:
            - username
            - email
            - password
        type: object
        x-go-package: github.com/gtvb/livestream/application/http
    User:
        description: Representa um usuário cadastrado na plataforma
        properties:
            created_at:
                format: date-time
                type: string
                x-go-name: CreatedAt
            email:
                type: string
                x-go-name: Email
            following:
                items:
                    type: string
                type: array
                x-go-name: Following
            id:
                type: string
                x-go-name: ID
            password:
                type: string
                x-go-name: Password
            updated_at:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            username:
                type: string
                x-go-name: Username
        type: object
        x-go-package: github.com/gtvb/livestream/models
info:
    description: Documentação da API de liveStreams
    title: LiveStreamAPI
    version: 1.0.0
paths:
    /livestreams/{user_id}:
        get:
            operationId: getUserLiveStreams
            responses:
                "200":
                    $ref: '#/responses/liveStreamsResponse'
                "404":
                    $ref: '#/responses/messageResponse'
            summary: Get all live streams that belong to the user specified by `user_id`.
            tags:
                - livestreams
    /livestreams/create:
        post:
            operationId: createLiveStream
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/CreateLiveStreamBody'
            responses:
                "201":
                    $ref: '#/responses/liveStreamResponse'
                "400":
                    $ref: '#/responses/messageResponse'
                "404":
                    $ref: '#/responses/messageResponse'
                "500":
                    $ref: '#/responses/messageResponse'
            summary: Create a new live stream and assign it to the user specified in the request body.
            tags:
                - livestreams
    /livestreams/delete/{id}:
        delete:
            operationId: deleteLiveStream
            responses:
                "200":
                    $ref: '#/responses/messageResponse'
                "400":
                    $ref: '#/responses/messageResponse'
                "404":
                    $ref: '#/responses/messageResponse'
                "500":
                    $ref: '#/responses/messageResponse'
            summary: Delete a live stream given a valid `id`.
            tags:
                - livestreams
    /livestreams/info/{id}:
        get:
            operationId: getLiveStreamData
            responses:
                "200":
                    $ref: '#/responses/liveStreamResponse'
                "404":
                    $ref: '#/responses/messageResponse'
                "500":
                    $ref: '#/responses/messageResponse'
            summary: Get data for the live stream represented by the specified `id`.
            tags:
                - livestreams
    /livestreams/update/{id}:
        patch:
            operationId: updateLiveStream
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/UpdateLiveStreamBody'
            responses:
                "200":
                    $ref: '#/responses/messageResponse'
                "400":
                    $ref: '#/responses/messageResponse'
                "404":
                    $ref: '#/responses/messageResponse'
                "500":
                    $ref: '#/responses/messageResponse'
            summary: Update the data of a live stream identified by the specified `id`.
            tags:
                - livestreams
    /users/{id}:
        delete:
            operationId: deleteUser
            responses:
                "200":
                    $ref: '#/responses/messageResponse'
                "404":
                    $ref: '#/responses/messageResponse'
            summary: Delete a user from the database along with all their registered live streams.
            tags:
                - users
        get:
            operationId: getUserProfile
            responses:
                "200":
                    $ref: '#/responses/userResponse'
                "404":
                    $ref: '#/responses/messageResponse'
            summary: Get user profile information given a valid id.
            tags:
                - users
        patch:
            operationId: updateUser
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/UpdateUserBody'
            responses:
                "200":
                    $ref: '#/responses/messageResponse'
                "400":
                    $ref: '#/responses/messageResponse'
            summary: Update the user's data identified by the specified `id` parameter.
            tags:
                - users
    /users/all:
        get:
            operationId: getAllUsers
            responses:
                "200":
                    description: User
                    schema:
                        items:
                            $ref: '#/definitions/User'
                        type: array
                "500":
                    $ref: '#/responses/messageResponse'
            summary: Get all users.
            tags:
                - users
    /users/login:
        post:
            operationId: loginUser
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/LoginBody'
            responses:
                "200":
                    $ref: '#/responses/tokenResponse'
                "400":
                    $ref: '#/responses/messageResponse'
                "404":
                    $ref: '#/responses/messageResponse'
                "500":
                    $ref: '#/responses/messageResponse'
            summary: Login a user and generate a token for future protected operations.
            tags:
                - users
    /users/signup:
        post:
            operationId: signupUser
            parameters:
                - in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/SignupBody'
            responses:
                "201":
                    $ref: '#/responses/tokenResponse'
                "400":
                    $ref: '#/responses/messageResponse'
                "500":
                    $ref: '#/responses/messageResponse'
            summary: Signup a user and generate a token for future protected operations.
            tags:
                - users
responses:
    liveStreamResponse:
        description: LiveStreamResponseWrapper contains a response with live stream data.
        schema:
            properties:
                stream_id:
                    description: ID of the live stream
                    type: string
                    x-go-name: StreamId
            type: object
    liveStreamsResponse:
        description: LiveStreamsResponseWrapper contains a response with live streams.
        schema:
            properties:
                livestreams:
                    description: List of live streams
                    items:
                        $ref: '#/definitions/LiveStream'
                    type: array
                    x-go-name: LiveStreams
            type: object
    messageResponse:
        description: MessageResponseWrapper contains a message response.
        headers:
            Body: {}
        schema:
            properties:
                message:
                    description: A descriptive message
                    type: string
                    x-go-name: Message
            type: object
    tokenResponse:
        description: TokenResponseWrapper contains a token response.
        headers:
            Body:
                description: |-
                    The JWT token for future protected requests.
                    required: true
        schema:
            properties:
                token:
                    type: string
                    x-go-name: Token
            type: object
    userListResponse:
        description: UserListResponseWrapper contains a user list response.
        schema:
            properties:
                users:
                    description: The user details
                    items:
                        $ref: '#/definitions/User'
                    type: array
                    x-go-name: Users
            type: object
    userResponse:
        description: UserResponseWrapper contains a user response.
        schema:
            properties:
                user:
                    $ref: '#/definitions/User'
            type: object
schemes:
    - http
swagger: "2.0"